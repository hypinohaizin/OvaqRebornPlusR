package net.shoreline.client.impl.module.exploit;

import net.minecraft.entity.Entity;
import net.minecraft.entity.TrackedPosition;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.network.listener.ClientPlayPacketListener;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.s2c.play.*;
import net.minecraft.util.math.Box;
import net.minecraft.util.math.Vec3d;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.NumberConfig;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.api.render.RenderBuffers;
import net.shoreline.client.api.render.RenderManager;
import net.shoreline.client.impl.event.TickEvent;
import net.shoreline.client.impl.event.network.DisconnectEvent;
import net.shoreline.client.impl.event.network.PacketEvent;
import net.shoreline.client.impl.event.render.RenderWorldEvent;
import net.shoreline.client.impl.imixin.IPlayerInteractEntityC2SPacket;
import net.shoreline.client.impl.module.client.ColorsModule;
import net.shoreline.client.util.network.InteractType;
import net.shoreline.eventbus.annotation.EventListener;
import net.shoreline.eventbus.event.StageEvent;

import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class BacktrackModule extends ToggleModule
{
    Config<Float> delayConfig = register(new NumberConfig<>("Delay", "The delay to hold packets in ms", 50.0f, 100.0f, 1000.0f));
    private final Queue<PacketData> packets = new LinkedBlockingQueue<>();
    private PlayerEntity trackedEntity;
    private TrackedPosition trackedPosition;

    public BacktrackModule()
    {
        super("Backtrack", "Delays packets to take advantage of lag compensation", ModuleCategory.EXPLOITS);
    }

    @Override
    public void onDisable()
    {
        if (mc.world == null)
        {
            return;
        }
        processPackets(true);
    }

    @EventListener
    public void onDisconnect(DisconnectEvent event)
    {
        packets.clear();
        trackedEntity = null;
        trackedPosition = null;
    }

    @EventListener(priority = Integer.MAX_VALUE)
    public void onTick(TickEvent event)
    {
        if (event.getStage() != StageEvent.EventStage.PRE)
        {
            return;
        }
        if (mc.player.age > 10)
        {
            processPackets(true);
        }
    }

    @EventListener
    public void onPacketInbound(PacketEvent.Inbound event)
    {
        if (mc.world == null || mc.player == null || event.getPacket() instanceof ChatMessageS2CPacket || event.getPacket() instanceof GameMessageS2CPacket
                || event.getPacket() instanceof CommandSuggestionsS2CPacket || event.getPacket() instanceof PlaySoundS2CPacket)
        {
            return;
        }

        if (event.getPacket() instanceof PlayerPositionLookS2CPacket || event.getPacket() instanceof HealthUpdateS2CPacket packet && packet.getHealth() <= 0.0)
        {
            processPackets(true);
            return;
        }
        if (trackedEntity != null && trackedPosition != null)
        {
            if (event.getPacket() instanceof EntityPositionS2CPacket packet && packet.getEntityId() == trackedEntity.getId())
            {
                trackedPosition.setPos(new Vec3d(packet.getX(), packet.getY(), packet.getZ()));
                if (mc.player.getEyePos().distanceTo(trackedPosition.pos) > mc.player.getEyePos().distanceTo(trackedEntity.getPos()))
                {
                    processPackets(true);
                    return;
                }
            }
            if (event.getPacket() instanceof EntityS2CPacket packet && packet.getEntity(mc.world) == trackedEntity)
            {
                trackedPosition.setPos(trackedPosition.withDelta(packet.getDeltaX(), packet.getDeltaY(), packet.getDeltaZ()));
                if (mc.player.getEyePos().distanceTo(trackedPosition.pos) > mc.player.getEyePos().distanceTo(trackedEntity.getPos()))
                {
                    processPackets(true);
                    return;
                }
            }
        }
        event.cancel();
        packets.add(new PacketData(event.getPacket(), System.currentTimeMillis()));
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Outbound event)
    {
        if (mc.player == null || mc.world == null || mc.player.age <= 10)
        {
            return;
        }
        if (event.getPacket() instanceof IPlayerInteractEntityC2SPacket packet
                && packet.getType() == InteractType.ATTACK)
        {
            Entity entity = packet.getEntity();
            if (entity instanceof PlayerEntity playerEntity)
            {
                if (entity != trackedEntity)
                {
                    processPackets(true);
                    trackedPosition = new TrackedPosition();
                    trackedPosition.setPos(entity.getTrackedPosition().pos);
                }
                trackedEntity = playerEntity;
            }
        }
    }

    @EventListener
    public void onRenderWorld(RenderWorldEvent event)
    {
        RenderBuffers.preRender();
        if (trackedEntity != null && trackedPosition != null)
        {
            Box box = PlayerEntity.STANDING_DIMENSIONS.getBoxAt(trackedPosition.pos);
            RenderManager.renderBox(event.getMatrices(),
                    box, ColorsModule.getInstance().getRGB(40));
            RenderManager.renderBoundingBox(event.getMatrices(),
                    box, 1.5f, ColorsModule.getInstance().getRGB(145));
        }
        RenderBuffers.postRender();
    }

    private void processPackets(boolean forceClear)
    {
        for (PacketData packetData : new LinkedBlockingQueue<>(packets))
        {
            if (forceClear || System.currentTimeMillis() - packetData.time() > delayConfig.getValue())
            {
                applyPacket(packetData.packet());
                packets.remove();
            }
        }
        trackedEntity = null;
        trackedPosition = null;
    }

    private void applyPacket(Packet<?> packet)
    {
        ((Packet<ClientPlayPacketListener>) packet).apply(mc.getNetworkHandler());
    }

    private record PacketData(Packet<?> packet, long time) {}
}
