package net.shoreline.client.impl.module.exploit;

import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.ChorusFruitItem;
import net.minecraft.item.ItemStack;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.c2s.play.TeleportConfirmC2SPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import net.minecraft.util.math.Box;
import net.minecraft.util.math.Vec3d;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.api.render.RenderBuffers;
import net.shoreline.client.api.render.RenderManager;
import net.shoreline.client.impl.event.TickEvent;
import net.shoreline.client.impl.event.network.PacketEvent;
import net.shoreline.client.impl.event.render.RenderWorldEvent;
import net.shoreline.client.impl.module.client.ColorsModule;
import net.shoreline.eventbus.annotation.EventListener;
import net.shoreline.eventbus.event.StageEvent;

/**
 * @author h_ypi
 * @since 1.0
 */
public class ChorusControlModule extends ToggleModule
{
    //
    private boolean cancelChorusTeleport;
    private int chorusTeleportId;
    private PlayerPositionLookS2CPacket teleportPacket;

    /**
     *
     */
    public ChorusControlModule()
    {
        super("ChorusControl", "Allows player to control chorus teleports",
                ModuleCategory.EXPLOITS);
    }

    @Override
    public void onDisable()
    {
        if (mc.getNetworkHandler() != null && teleportPacket != null)
        {
            mc.getNetworkHandler().onPlayerPositionLook(teleportPacket);
        }
        teleportPacket = null;
        cancelChorusTeleport = false;
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Outbound event)
    {
        if (cancelChorusTeleport)
        {
            if (event.getPacket() instanceof PlayerMoveC2SPacket packet && packet.changesPosition())
            {
                event.cancel();
            }
            else if (event.getPacket() instanceof TeleportConfirmC2SPacket packet)
            {
                event.cancel();
                chorusTeleportId = packet.getTeleportId();
            }
        }
    }

    @EventListener
    public void onPacketInbound(PacketEvent.Inbound event)
    {
        if (event.getPacket() instanceof PlayerPositionLookS2CPacket packet && cancelChorusTeleport)
        {
            event.cancel();
            teleportPacket = packet;
        }
    }

    @EventListener
    public void onTick(TickEvent event)
    {
        if (event.getStage() != StageEvent.EventStage.PRE)
        {
            return;
        }
        if (mc.player.isSneaking() && cancelChorusTeleport)
        {
            if (mc.getNetworkHandler() != null && teleportPacket != null)
            {
                mc.getNetworkHandler().onPlayerPositionLook(teleportPacket);
            }
            teleportPacket = null;
            cancelChorusTeleport = false;
        }
        if (!cancelChorusTeleport && mc.player.isUsingItem())
        {
            ItemStack stack = mc.player.getStackInHand(mc.player.getActiveHand());
            if (stack.getItem() instanceof ChorusFruitItem
                    && stack.getMaxUseTime(mc.player) - mc.player.getItemUseTime() <= 1)
            {
                cancelChorusTeleport = true;
            }
        }
    }

    @EventListener
    public void onRenderWorld(RenderWorldEvent event)
    {
        if (teleportPacket != null)
        {
            Vec3d vec3d = new Vec3d(teleportPacket.getX(), teleportPacket.getY(), teleportPacket.getZ());
            Box teleportBox = PlayerEntity.STANDING_DIMENSIONS.getBoxAt(vec3d);
            RenderBuffers.preRender();
            RenderManager.renderBox(event.getMatrices(), teleportBox,
                    ColorsModule.getInstance().getRGB(60));
            RenderManager.renderBoundingBox(event.getMatrices(), teleportBox,
                    1.5f, ColorsModule.getInstance().getRGB(100));
            RenderBuffers.postRender();
        }
    }
}
