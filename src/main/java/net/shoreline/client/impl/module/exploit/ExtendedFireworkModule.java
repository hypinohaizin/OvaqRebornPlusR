package net.shoreline.client.impl.module.exploit;

import net.minecraft.entity.Entity;
import net.minecraft.entity.projectile.FireworkRocketEntity;
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket;
import net.minecraft.network.packet.s2c.play.EntitiesDestroyS2CPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.TickEvent;
import net.shoreline.client.impl.event.network.GameJoinEvent;
import net.shoreline.client.impl.event.network.PacketEvent;
import net.shoreline.client.init.Managers;
import net.shoreline.client.mixin.accessor.AccessorFireworkRocketEntity;
import net.shoreline.client.util.math.timer.CacheTimer;
import net.shoreline.client.util.math.timer.Timer;
import net.shoreline.eventbus.annotation.EventListener;
import net.shoreline.eventbus.event.StageEvent;

import java.text.DecimalFormat;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 * @author OvaqRebornPlus
 * @since 1.0
 */
public class ExtendedFireworkModule extends ToggleModule
{
    private static ExtendedFireworkModule INSTANCE;

    private final List<CommonPongC2SPacket> packetList = new CopyOnWriteArrayList<>();
    //
    private boolean extendFirework;
    private final Timer extendFireworkTimer = new CacheTimer();
    private FireworkRocketEntity firework;

    public ExtendedFireworkModule()
    {
        super("ExtendedFirework", "Extends firework boost duration", ModuleCategory.EXPLOITS);
        INSTANCE = this;
    }

    public static ExtendedFireworkModule getInstance()
    {
        return INSTANCE;
    }

    @Override
    public String getModuleData()
    {
        if (!extendFirework)
        {
            extendFireworkTimer.reset();
        }
        return new DecimalFormat("0.0").format(extendFireworkTimer.getElapsedTime() / 1000.0f) + "s";
    }

    @Override
    public void onDisable()
    {
        if (firework != null)
        {
            ((AccessorFireworkRocketEntity) firework).hookExplodeAndRemove();
            firework = null;
        }
        extendFirework = false;
        extendFireworkTimer.reset();
        sendPongPackets();
    }

    @EventListener
    public void onGameJoin(GameJoinEvent event)
    {
        if (firework != null)
        {
            ((AccessorFireworkRocketEntity) firework).hookExplodeAndRemove();
            firework = null;
        }
        extendFirework = false;
        extendFireworkTimer.reset();
    }

    @EventListener
    public void onTick(TickEvent event)
    {
        if (event.getStage() != StageEvent.EventStage.PRE)
        {
            return;
        }
        if (!extendFirework)
        {
            for (Entity entity : mc.world.getEntities())
            {
                if (entity instanceof FireworkRocketEntity rocket
                        && ((AccessorFireworkRocketEntity) rocket).hookWasShotByEntity()
                        && ((AccessorFireworkRocketEntity) rocket).hookGetShooter() == mc.player)
                {
                    firework = rocket;
                    break;
                }
            }
            extendFireworkTimer.reset();
            return;
        }
        if (!DisablerModule.getInstance().isGrimFirework() && mc.player.isOnGround() || extendFireworkTimer.passed(44000))
        {
            extendFirework = false;
            if (firework != null)
            {
                ((AccessorFireworkRocketEntity) firework).hookExplodeAndRemove();
                firework = null;
            }
            sendPongPackets();
        }
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Outbound event)
    {
        if (mc.player == null || mc.world == null)
        {
            return;
        }
        if (event.getPacket() instanceof CommonPongC2SPacket packet && extendFirework)
        {
            event.cancel();
            packetList.add(packet);
        }
    }

    @EventListener
    public void onPacketInbound(PacketEvent.Inbound event)
    {
        if (mc.player == null || mc.world == null)
        {
            return;
        }
        if (event.getPacket() instanceof EntitiesDestroyS2CPacket packet && firework != null)
        {
            for (int id : packet.getEntityIds())
            {
                if (id == firework.getId())
                {
                    event.cancel();
                    extendFirework = true;
                    extendFireworkTimer.reset();
                    return;
                }
            }
        }
        if (event.getPacket() instanceof PlayerPositionLookS2CPacket && extendFirework)
        {
            extendFirework = false;
            if (firework != null)
            {
                ((AccessorFireworkRocketEntity) firework).hookExplodeAndRemove();
                firework = null;
            }
            sendPongPackets();
        }
    }

    private void sendPongPackets()
    {
        for (CommonPongC2SPacket packet : packetList)
        {
            Managers.NETWORK.sendPacket(packet);
        }
        packetList.clear();
    }

    public boolean isExtendingFirework()
    {
        return extendFirework;
    }
}