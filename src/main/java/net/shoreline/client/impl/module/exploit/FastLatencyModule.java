package net.shoreline.client.impl.module.exploit;

import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;
import net.minecraft.network.packet.s2c.play.CommandSuggestionsS2CPacket;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.TickEvent;
import net.shoreline.client.impl.event.network.DisconnectEvent;
import net.shoreline.client.impl.event.network.PacketEvent;
import net.shoreline.client.init.Managers;
import net.shoreline.client.util.math.timer.CacheTimer;
import net.shoreline.client.util.math.timer.Timer;
import net.shoreline.eventbus.annotation.EventListener;

public class FastLatencyModule extends ToggleModule
{
    private static FastLatencyModule INSTANCE;

    private long requestTime;
    private long latency;
    private final Timer lastRequest = new CacheTimer();
    private final Timer requestTimer = new CacheTimer();

    public FastLatencyModule()
    {
        super("FastLatency", "Calculates server ping", ModuleCategory.EXPLOITS);
        INSTANCE = this;
    }

    public static FastLatencyModule getInstance()
    {
        return INSTANCE;
    }

    @Override
    public String getModuleData()
    {
        return String.format("%dms", latency);
    }

    @EventListener
    public void onDisconnect(DisconnectEvent event)
    {
        latency = 0;
        requestTime = 0;
    }

    @EventListener
    public void onTick(TickEvent event)
    {
        if (lastRequest.passed(5000) && requestTimer.passed(500))
        {
            Managers.NETWORK.sendPacket(new RequestCommandCompletionsC2SPacket(1000, "w "));
            requestTimer.reset();
            lastRequest.reset();
            requestTime = System.currentTimeMillis();
        }
    }

    @EventListener
    public void onPacketInbound(PacketEvent.Inbound event)
    {
        if (event.getPacket() instanceof CommandSuggestionsS2CPacket packet && packet.id() == 1000)
        {
            latency = System.currentTimeMillis() - requestTime;
            lastRequest.setElapsedTime(Timer.MAX_TIME);
        }
    }

    public long getLatency()
    {
        return latency;
    }
}
