package net.shoreline.client.impl.module.exploit;

import net.minecraft.client.gui.screen.DownloadingTerrainScreen;
import net.minecraft.network.packet.c2s.play.TeleportConfirmC2SPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.BooleanConfig;
import net.shoreline.client.api.config.setting.EnumConfig;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.TickEvent;
import net.shoreline.client.impl.event.entity.EntityDeathEvent;
import net.shoreline.client.impl.event.network.PacketEvent;
import net.shoreline.client.util.math.timer.CacheTimer;
import net.shoreline.client.util.math.timer.Timer;
import net.shoreline.eventbus.annotation.EventListener;
import net.shoreline.eventbus.event.StageEvent;

/**
 * @author h_ypi
 * @since 1.0
 */
public class GodModeModule extends ToggleModule
{
    private static GodModeModule INSTANCE;

    //
    Config<Mode> modeConfig = register(new EnumConfig<>("Mode", "The mode for the invulnerability exploit", Mode.PORTAL, Mode.values()));
    Config<Boolean> positionAdjustConfig = register(new BooleanConfig("PositionAdjust", "Adjusts position to match server portal position", true, () -> modeConfig.getValue() == Mode.PORTAL));
    //
    private double teleportX;
    private double teleportY;
    private double teleportZ;
    private boolean cancelTeleport;
    private boolean cancelPackets;
    //
    private final Timer portalTimer = new CacheTimer();

    /**
     *
     */
    public GodModeModule()
    {
        super("GodMode", "Makes the player invincible", ModuleCategory.EXPLOITS);
        INSTANCE = this;
    }

    public static GodModeModule getInstance()
    {
        return INSTANCE;
    }

    @Override
    public void onEnable()
    {
        teleportX = 0.0;
        teleportY = 0.0;
        teleportZ = 0.0;
    }

    @Override
    public void onDisable()
    {
        cancelTeleport = false;
        cancelPackets = false;
    }

    @EventListener
    public void onPacketInbound(PacketEvent.Inbound event)
    {
        if (mc.player == null)
        {
            return;
        }
        if (modeConfig.getValue() == Mode.PORTAL)
        {
            if (mc.currentScreen instanceof DownloadingTerrainScreen)
            {
                cancelTeleport = true;
                mc.currentScreen = null;
                portalTimer.reset();
            }
            if (event.getPacket() instanceof PlayerPositionLookS2CPacket packet)
            {
                if (positionAdjustConfig.getValue() && !mc.player.isRiding())
                {
                    teleportX = packet.getX();
                    teleportY = packet.getY();
                    teleportZ = packet.getZ();
                    mc.player.setPosition(packet.getX(), packet.getY(), packet.getZ());
                }
                event.cancel();
            }
        }
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Outbound event)
    {
        if (event.getPacket() instanceof TeleportConfirmC2SPacket
                && modeConfig.getValue() == Mode.PACKET && cancelPackets)
        {
            event.cancel();
        }
    }

    @EventListener
    public void onEntityDeath(EntityDeathEvent event)
    {
        if (event.getEntity() == mc.player)
        {
            cancelPackets = true;
        }
    }

    @EventListener
    public void onTick(TickEvent event)
    {
        if (event.getStage() == StageEvent.EventStage.PRE && modeConfig.getValue() == Mode.PORTAL
                && teleportX != 0.0 && teleportY != 0.0 && teleportZ != 0.0 && cancelTeleport)
        {
            mc.player.setPosition(teleportX, teleportY, teleportZ);
            if (portalTimer.passed(2500))
            {
                cancelTeleport = false;
            }
        }
    }

    public boolean isPortal()
    {
        return isEnabled() && modeConfig.getValue() == Mode.PORTAL;
    }

    public enum Mode
    {
        PACKET,
        PORTAL
    }
}
