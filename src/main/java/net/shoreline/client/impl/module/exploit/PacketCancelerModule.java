package net.shoreline.client.impl.module.exploit;

import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket;
import net.minecraft.network.packet.c2s.common.KeepAliveC2SPacket;
import net.minecraft.network.packet.c2s.play.*;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.BooleanConfig;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.network.PacketEvent;
import net.shoreline.eventbus.annotation.EventListener;

/**
 * @author h_ypi
 * @since 1.0
 */
public class PacketCancelerModule extends ToggleModule
{
    // DO NOT ENABLE THIS MODULE IF YOU DONT KNOW WHAT YOURE DOING
    //
    Config<Boolean> playerMoveConfig = register(new BooleanConfig("PlayerMove", "Cancels the PlayerMoveC2SPacket packet", false));
    Config<Boolean> playerInputConfig = register(new BooleanConfig("PlayerInput", "Cancels the PlayerInputC2SPacket packet", false));
    Config<Boolean> playerInteractBlockConfig = register(new BooleanConfig("PlayerInteractBlock", "Cancels the PlayerInteractBlockC2SPacket packet", false));
    Config<Boolean> playerInteractEntityConfig = register(new BooleanConfig("PlayerInteractEntity", "Cancels the PlayerInteractEntityC2SPacket packet", false));
    Config<Boolean> playerInteractItemConfig = register(new BooleanConfig("PlayerInteractItem", "Cancels the PlayerInteractItemC2SPacket packet", false));
    Config<Boolean> craftRequestConfig = register(new BooleanConfig("CraftRequest", "Cancels the CraftRequestSlotC2SPacket packet", false));
    Config<Boolean> updateSelectedSlotConfig = register(new BooleanConfig("UpdateSelectedSlot", "Cancels the UpdateSelectedSlotC2SPacket packet", false));
    Config<Boolean> clickSlotConfig = register(new BooleanConfig("ClickSlot", "Cancels the ClickSlotC2SPacket packet", false));
    Config<Boolean> pickFromInventoryConfig = register(new BooleanConfig("PickFromInventory", "Cancels the PickFromInventoryC2SPacket packet", false));
    Config<Boolean> creativeInventoryActionConfig = register(new BooleanConfig("CreativeInventoryAction", "Cancels the CreativeInventoryActionC2SPacket packet", false));
    Config<Boolean> handSwingConfig = register(new BooleanConfig("HandSwing", "Cancels the HandSwingC2SPacket packet", false));
    Config<Boolean> teleportConfirmConfig = register(new BooleanConfig("TeleportConfirm", "Cancels the TeleportConfirmC2SPacket packet", false));
    Config<Boolean> keepAliveConfig = register(new BooleanConfig("KeepAlive", "Cancels the KeepAliveC2SPacket packet", false));
    Config<Boolean> commonPongConfig = register(new BooleanConfig("CommonPong", "Cancels the CommonPongC2SPacket packet", false));

    /**
     *
     */
    public PacketCancelerModule()
    {
        super("PacketCanceler", "Cancels packets when sending to server",
                ModuleCategory.EXPLOITS);
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Outbound event)
    {
        if (event.getPacket() instanceof PlayerMoveC2SPacket
                && playerMoveConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof PlayerInputC2SPacket
                && playerInputConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof PlayerInteractBlockC2SPacket
                && playerInteractBlockConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof PlayerInteractEntityC2SPacket
                && playerInteractEntityConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof PlayerInteractItemC2SPacket
                && playerInteractItemConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof CraftRequestC2SPacket
                && craftRequestConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof UpdateSelectedSlotC2SPacket
                && updateSelectedSlotConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof ClickSlotC2SPacket
                && clickSlotConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof PickFromInventoryC2SPacket
                && pickFromInventoryConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof CreativeInventoryActionC2SPacket
                && creativeInventoryActionConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof HandSwingC2SPacket
                && handSwingConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof TeleportConfirmC2SPacket
                && teleportConfirmConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof KeepAliveC2SPacket
                && keepAliveConfig.getValue())
        {
            event.cancel();
        }
        else if (event.getPacket() instanceof CommonPongC2SPacket
                && commonPongConfig.getValue())
        {
            event.cancel();
        }
    }
}
