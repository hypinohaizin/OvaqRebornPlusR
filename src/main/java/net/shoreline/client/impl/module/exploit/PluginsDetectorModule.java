package net.shoreline.client.impl.module.exploit;

import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;
import net.minecraft.network.packet.s2c.play.ChatMessageS2CPacket;
import net.minecraft.network.packet.s2c.play.CommandSuggestionsS2CPacket;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.network.PacketEvent;
import net.shoreline.client.impl.event.network.PlayerTickEvent;
import net.shoreline.client.util.chat.ChatUtil;
import net.shoreline.eventbus.annotation.EventListener;

import java.util.*;
import java.util.stream.Collectors;

public final class PluginsDetectorModule extends ToggleModule {
    private int step;
    private int tickCounter;
    private String[] plugins;
    private static final List<String> ANTI_CHEATS = Arrays.asList(
            "nocheatplus", "grimac", "aac", "hawk",
            "intave", "horizon", "vulcan", "spartan",
            "kauri", "anticheatreloaded", "matrix",
            "themis", "negativity"
    );

    public PluginsDetectorModule() {
        super("PluginsDetector", "Detect server plugins via tab-complete spoof", ModuleCategory.EXPLOITS);
    }

    @Override
    protected void onEnable() {
        step = 0;
        tickCounter = 0;
        plugins = null;
        ChatUtil.clientSendMessage("Starting Plugins Detector...");
    }

    @EventListener
    public void onPlayerTick(PlayerTickEvent event) {
        if (mc.player == null || mc.world == null) return;

        tickCounter++;
        if (tickCounter < 20) return;
        tickCounter = 0;

        switch (step) {
            case 0 -> mc.player.networkHandler.sendPacket(
                    new RequestCommandCompletionsC2SPacket(0, "/version ")
            );
            case 1 -> mc.player.networkHandler.sendPacket(
                    new RequestCommandCompletionsC2SPacket(0, "/bukkit:version ")
            );
            case 2, 3 -> { /* wait */ }
            case 4 -> mc.player.networkHandler.sendPacket(
                    new RequestCommandCompletionsC2SPacket(0, "/")
            );
            default -> disable();
        }
        step++;
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Outbound event) {
        Packet<?> p = event.getPacket();
        if (p instanceof CommandSuggestionsS2CPacket sug) {
            if (step == 1 || step == 2) {
                String[] suggests = sug.suggestions().stream()
                        .map(CommandSuggestionsS2CPacket.Suggestion::text)
                        .toArray(String[]::new);
                if (suggests.length > 0) {
                    plugins = Arrays.stream(suggests)
                            .filter(s -> s.matches("[a-zA-Z0-9]{1,32}"))
                            .toArray(String[]::new);
                    if (plugins.length > 0) {
                        event.setCanceled(true);
                        disable();
                    }
                }
            } else if (step == 5) {
                String[] suggests = sug.suggestions().stream()
                        .map(CommandSuggestionsS2CPacket.Suggestion::text)
                        .toArray(String[]::new);
                if (suggests.length > 0) {
                    plugins = Arrays.stream(suggests)
                            .filter(s -> s.matches("[a-z0-9]{1,32}:[a-zA-Z0-9]{1,31}"))
                            .map(s -> s.split(":")[0])
                            .toArray(String[]::new);
                    if (plugins.length > 0) {
                        event.setCanceled(true);
                        disable();
                    }
                }
            }
        } else if (p instanceof ChatMessageS2CPacket chat) {
            String content = chat.body().content();
            if (content.matches("Plugins \\([0-9]+\\): ([a-zA-Z0-9]{1,32})(, [a-zA-Z0-9]{1,32})*")) {
                plugins = content.replaceFirst("Plugins \\([0-9]+\\): ", "").split(", ");
                event.setCanceled(true);
                disable();
            }
        }
    }

    @Override
    protected void onDisable() {
        if (mc.player == null || mc.world == null) return;

        if (plugins == null || plugins.length == 0) {
            ChatUtil.clientSendMessage("Plugins Detector: failed to detect plugins.");
        } else {
            long acCount = Arrays.stream(plugins)
                    .filter(s -> ANTI_CHEATS.contains(s.toLowerCase(Locale.ROOT)))
                    .count();
            String list = Arrays.stream(plugins)
                    .map(s -> (ANTI_CHEATS.contains(s.toLowerCase(Locale.ROOT)) ? "AC-" : "") + s)
                    .collect(Collectors.joining(", "));
            ChatUtil.clientSendMessage(
                    "Plugins Detected [All: " + plugins.length +
                            ", AC: " + acCount + "] - " + list
            );
        }
        plugins = null;
    }
}
